# load packages
library(tidyverse)
library(lme4)
library(ggbeeswarm)
library(ggcorrplot)
library(colorspace)
library(effectsize)
library(ggpubr)
# import the pre-processed data
d <- read.csv('preProcessedData.csv')
# import the pre-processed data
d <- read.csv('Analysis/preProcessedData.csv')
d
q()
q()
# print the best explanation for each scenario
# (broken down by explanation type)
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Teleological', SID==i)
index <- which.max(sub$Quality)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
# load packages
library(tidyverse)
library(lme4)
library(ggbeeswarm)
library(ggcorrplot)
library(colorspace)
library(effectsize)
library(ggpubr)
# print the best explanation for each scenario
# (broken down by explanation type)
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Teleological', SID==i)
index <- which.max(sub$Quality)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
# create a compressed dataframe with the mean rating for
# each explanation
dcompexp <- d %>% group_by(EID, type, SID, explanation, scenarioName,
scenarioDescription) %>%
summarize(Satisfying=mean(Satisfying),
SufficientDetail=mean(SufficientDetail),
Complete=mean(Complete),
Trust=mean(Trust),
Quality=mean(Quality),
Teleological=mean(Teleological),
MechanisticAgent=mean(MechanisticAgent),
MechanisticLayout=mean(MechanisticLayout),
ExplanationNeed=mean(ExplanationNeed),
NumCauses=mean(NumCauses))
# import the pre-processed data
d <- read.csv('../Analysis/preProcessedData.csv')
# put data in long format
dlong <- d %>% gather(key='perceivedType', value='value',
Teleological, MechanisticAgent, MechanisticLayout)
# since SufficientDetail, Satisfyingness and Completeness are highly correlated
# with each other (rs > .8), we create a composite 'Quality' variable
# that averages them
d <- d %>% mutate(Quality = (SufficientDetail + Satisfying + Complete)/3)
# create a compressed dataframe with the mean rating for
# each explanation
dcompexp <- d %>% group_by(EID, type, SID, explanation, scenarioName,
scenarioDescription) %>%
summarize(Satisfying=mean(Satisfying),
SufficientDetail=mean(SufficientDetail),
Complete=mean(Complete),
Trust=mean(Trust),
Quality=mean(Quality),
Teleological=mean(Teleological),
MechanisticAgent=mean(MechanisticAgent),
MechanisticLayout=mean(MechanisticLayout),
ExplanationNeed=mean(ExplanationNeed),
NumCauses=mean(NumCauses))
# print the best explanation for each scenario
# (broken down by explanation type)
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Teleological', SID==i)
index <- which.max(sub$Quality)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
# print the best explanation for each scenario
# (broken down by explanation type)
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Teleological', SID==i)
index <- which.max(sub$Quality)
print(i)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Mechanistic', SID==i)
index <- which.max(sub$Quality)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
# print the best explanation for each scenario
# (broken down by explanation type)
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Teleological', SID==i)
index <- which.max(sub$Quality)
print(i)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Mechanistic', SID==i)
index <- which.max(sub$Quality)
print(i)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
for (i in 1:14){
sub <- dcompexp %>% filter(type=='Counterfactual', SID==i)
index <- which.max(sub$Quality)
print(i)
print(sub[index,]$Quality)
print(sub[index,]$explanation)
}
q()
